% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_management.R
\name{speech_to_summary_workflow}
\alias{speech_to_summary_workflow}
\title{Full Speech-To-Summary Workflow Execution}
\usage{
speech_to_summary_workflow(
  target_dir = getwd(),
  source_audio = list.files(target_dir, pattern = ".*\\\\.(wav|mp\\\\d)$", full.names =
    T)[1],
  split_audio = TRUE,
  split_audio_duration = 40,
  stt_audio_dir = file.path(target_dir, "audio_to_transcribe"),
  overwrite_stt_audio = FALSE,
  stt_output_dir = file.path(target_dir, "transcription_output_data"),
  stt_model = getOption("minutemaker_stt_model"),
  stt_initial_prompt = NULL,
  stt_language = "en",
  extra_stt_args = NULL,
  stt_overwrite_output_files = FALSE,
  transcript_file = file.path(target_dir, "transcript.csv"),
  event_start_time = getOption("minutemaker_event_start_time"),
  overwrite_transcript = FALSE,
  transcript_to_merge = list.files(target_dir, pattern = "\\\\.(vtt|srt)", full.names =
    T)[1],
  import_diarization_on_merge = TRUE,
  chat_file = list.files(target_dir, pattern = "Chat", full.names = T)[1],
  chat_format = "webex",
  agenda = file.path(target_dir, "agenda.R"),
  expected_agenda = NULL,
  agenda_generation_window_size = 3600,
  agenda_generation_output_file = file.path(target_dir, "agenda.R"),
  extra_agenda_generation_args = NULL,
  multipart_summary = validate_agenda(agenda),
  event_description = NULL,
  audience = "An audience with understanding of the topic",
  vocabulary = NULL,
  consider_diarization = TRUE,
  summary_structure = get_prompts("summary_structure"),
  extra_diarization_instructions = NULL,
  extra_output_instructions = NULL,
  llm_provider = getOption("minutemaker_llm_provider"),
  extra_summarise_args = NULL,
  summarization_window_size = 15,
  summarization_output_length = if (isTRUE(multipart_summary)) 1 else 3,
  summarization_method = c("simple", "rolling"),
  summarization_output_file = file.path(target_dir, "event_summary.R"),
  overwrite_summary_tree = FALSE,
  formatted_output_file = file.path(target_dir, "event_summary.txt"),
  overwrite_formatted_output = FALSE
)
}
\arguments{
\item{target_dir}{A path to the folder where the summarisation process will
take place. All the intermediate and output files will be stored and looked
for here. It allows encapsulating a single summarisation task from start to
end.}

\item{source_audio}{A path to an audio file in wav or mp3/4 format. If
\code{split_audio} is TRUE, it will be split into multiple files which will be
place into the \code{stt_audio_dir} folder. See \code{split_audio} for more details.}

\item{split_audio}{A boolean indicating whether the audio file should be
split into multiple files. Some models, like "Whisper" based ones, can
process files only up to 25 MB. See \code{split_audio} for more details.}

\item{split_audio_duration}{The duration of each splitted audio file in
minutes. 20 minutes equate to more or less 7-8 MB. See \code{split_audio} for
more details.}

\item{stt_audio_dir}{A string with the path to the folder where the audio
files to transcribe will be stored. See \code{split_audio} and
\code{perform_speech_to_text} for more details. The files in this folder will be
used as input for the speech-to-text model, so you can manually add audio
files to transcribe directly here.}

\item{overwrite_stt_audio}{A boolean indicating whether the audio files to
transcribe should be overwritten if they already exist.}

\item{stt_output_dir}{A string with the path to the folder where the json
files generated by the speech-to-text model will be stored. See
\code{perform_speech_to_text} for more details.}

\item{stt_model}{A string indicating the speech-to-text model to use. See
\code{perform_speech_to_text} for more details.}

\item{stt_initial_prompt}{A string with the path to a file containing the
initial prompt to be used by the speech-to-text model. See
\code{perform_speech_to_text} for more details.}

\item{stt_language}{A string indicating the language of the audio file. See
\code{perform_speech_to_text} for more details.}

\item{extra_stt_args}{A list containing extra arguments to be passed to the
stt model function. See \code{perform_speech_to_text} for more details.}

\item{stt_overwrite_output_files}{A boolean indicating whether the json files
generated by the speech-to-text model should be overwritten if they already
exist. See \code{perform_speech_to_text} for more details.}

\item{transcript_file}{A path to the output file where the transcript will be
written.}

\item{event_start_time}{The start time of the event in the HH:MM(:SS)( AM/PM)
format. Will be used to add the actual clock time to the transcript
segments. If NULL, the clock time will not be added. See
\code{parse_transcript_json()} for more details.}

\item{overwrite_transcript}{A boolean indicating whether the transcript
output file should be overwritten if it already exists.}

\item{transcript_to_merge}{A string with the path to the transcript file to
be merged with the transcript generated by the speech-to-text model. It
will be picked up automatically if a .vtt or .srt file is available in the
target directory. Pass NULL to disable the automatic importation of
transcript files. See \code{merge_transcripts} for more details.}

\item{import_diarization_on_merge}{A boolean indicating whether the speaker
should be imported from the transcript to be merged, if present. See
\code{merge_transcripts} for more details.}

\item{chat_file}{A string with the path to a file containing the chat data.
It will be picked up automatically if a file with "Chat" in its name is
available in the target directory. Pass NULL to disable the automatic chat
file importation. See \code{add_chat_transcript} for more details. Note that
\code{event_start_time} must be set if \code{chat_file} is not NULL.}

\item{chat_format}{A string indicating the online meeting platform used to
generate the chat file. See \code{add_chat_transcript} for more details.}

\item{agenda}{The agenda of the meeting, that is, a list of agenda elements
each with a session name, a title, speaker and moderator lists, type of
talk, talk description and start and end times. Alternatively, the path to
an R file containing such a list. See \code{summarise_full_meeting} for more
details. If NULL, the user will be asked if the system should try to
generate the agenda automatically, using the \code{infer_agenda_from_transcript}
function. If FALSE, the agenda will not be used.}

\item{expected_agenda}{A character string. Only used if the \code{agenda} argument
is \code{NULL} and the user requests the automatic agenda generation. this
string will be used to drive the LLM while generating the agenda. See
\code{infer_agenda_from_transcript} for more details.}

\item{agenda_generation_window_size}{The size of the window in seconds to
analyze at once when generating the agenda. See
\code{infer_agenda_from_transcript} for more details.}

\item{agenda_generation_output_file}{A string with the path to the output
file where the automatically generated agenda will be written. Should be a
.R file. See \code{infer_agenda_from_transcript} for more details.}

\item{extra_agenda_generation_args}{Additional arguments passed to the
\code{infer_agenda_from_transcript} function. See \code{infer_agenda_from_transcript}
for more details. Note that the \code{diarization_instructions} argument for
this function will be taken from the \code{extra_agenda_generation_args}
argument.}

\item{multipart_summary}{If a valid agenda is provided, this argument allows
the user to specify whether the summarisation should be done in parts, one
for each agenda element using the \code{summarise_full_meeting} function, or in
one go using the \code{summarise_transcript} function. See the respective
functions for more details.}

\item{event_description}{A string containing a description of the meeting.
See \code{summarise_transcript} for more details.}

\item{audience}{A string containing a description of the audience of the
meeting and what to focus on in the summary. See \code{summarise_transcript} for
more details.}

\item{vocabulary}{A character vector of specific vocabulary words, names,
definitions, to help the LLM recognise misspellings and abbreviations. See
\code{summarise_transcript} for more details.}

\item{consider_diarization}{A logical indicating whether the summarisation
should take into account the diarization of the transcript. See
\code{summarise_transcript} for more details.}

\item{summary_structure, extra_diarization_instructions, extra_output_instructions}{Specific instructions necessary to build the summarisation prompt. See
\code{summarise_transcript} for more details and run \code{get_prompts()} to see the
defaults. See \code{summarise_transcript} for more details.}

\item{llm_provider}{A string indicating the LLM provider to use for the
summarization. See \code{summarise_transcript} for more details.}

\item{extra_summarise_args}{Additional arguments passed to the
\code{interrogate_llm} function. See \code{summarise_transcript} for more details.}

\item{summarization_window_size}{The size of the summarization window in
minutes if the "rolling"  method is used. See \code{summarise_transcript} for
more details.}

\item{summarization_output_length}{An indication to the LLM regarding the
length of the output in pages. See \code{summarise_transcript} for more details.}

\item{summarization_method}{A string indicating the summarization method to
use. See \code{summarise_full_meeting} for more details.}

\item{summarization_output_file}{A string with the path to the output file
where the summary tree will be written. Should be a .R file. See
\code{summarise_full_meeting} for more details.}

\item{overwrite_summary_tree}{A boolean indicating whether the summary tree
output file should be overwritten if it already exists.}

\item{formatted_output_file}{A string with the path to the output file where
the formatted summary will be written.}

\item{overwrite_formatted_output}{A boolean indicating whether the formatted
summary output file should be overwritten if it already exists.}
}
\value{
A list containing the transcript data, the summary tree and the
formatted summary.
}
\description{
This function executes the full speech-to-summary workflow, from the
transcription of the audio recording to the generation of the summary tree,
to the formatting of the summary tree into a human-readable text.
}
